@page "/categories"
<PageTitle>Categories</PageTitle>
@using CurrieTechnologies.Razor.SweetAlert2
@using FrontStore.Model
@using FrontStore.Pages.Auth
@using FrontStore.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject SweetAlertService Swal;


@attribute [Authorize(Roles = "Admin")]


<button Color="Color.Primary" class="btn btn-primary" onclick="@AddCategory">Add Category</button>


<div class="row justify-content-center">
    <div class="col-md-6 col-lg-6 col-sm-10">
        <CategoriesList Categories="@categories" OnEditCategory="EditCategory" OnDeleteCategory="DeleteCategory" />
    </div>
</div>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalBody>
            <CategoryForm Category="@category" OnSaveCategory="SaveCategory" />
        </ModalBody>
    </ModalContent>
</Modal>





@code {
    private List<Category> categories = new List<Category>();

    private Modal modalRef;


    [Inject]
    private ICategoryService CategoryService { get; set; }

    private Category category = new Category();

    private Task AddCategory()
    {
        category = new Category();
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }


    protected override async Task OnInitializedAsync()
    {

        try
        {
            categories = await CategoryService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading categories: {0}", ex.Message);
        }


    }

    private void EditCategory(Category editCategory)
    {
        category = editCategory;
        modalRef.Show();
    }

    private async Task DeleteCategory(int categoryId)
    {

        try
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "Are you sure that you want to delete this category?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "No, keep it"
                });

            if (result.IsConfirmed)
            {
                await CategoryService.DeleteCategoryAsync(categoryId);
                categories.RemoveAll(c => c.Id == categoryId);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error deleting category: {0}", ex.Message);
        }


    }

    private async Task SaveCategory(Category sumbittedCategory)
    {


        try
        {
            if (sumbittedCategory.Id == 0)
            {

                var addedCategory = await CategoryService.CreateCategoryAsync(sumbittedCategory);
                categories.Add(addedCategory);


            }
            else
            {

                var updatedCategory = await CategoryService.UpdateCategoryAsync(sumbittedCategory);
                int index = categories.FindIndex(c => c.Id == updatedCategory.Id);
                categories[index] = updatedCategory;


            }

            await HideModal();

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Category saved successfully",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error adding category: {0}", ex.Message);
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Error saving category",
                    Icon = SweetAlertIcon.Error
                });
        }


    }
}
